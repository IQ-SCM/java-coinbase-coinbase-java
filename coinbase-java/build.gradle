apply from: './dependencies.gradle'

buildscript {

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        google()
    }

    ext.mavenGradlePlugin = '1.5'
    ext.retrolambda = '3.6.1'
    ext.bintary = '1.6'

    dependencies {
        classpath "com.github.dcendents:android-maven-gradle-plugin:$mavenGradlePlugin"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintary"
        classpath "me.tatarka:gradle-retrolambda:$retrolambda"
    }
}

def packageName = 'coinbase-java'
def packageVersion = '3.0.0-14'
def packageDescription = 'Coinbase Android SDK'
group = 'com.coinbase'
version = packageVersion


repositories {
    jcenter()
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'checkstyle'
apply plugin: 'pmd'

android {
    compileSdkVersion 27
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName packageVersion
    }

    lintOptions {
        warning 'InvalidPackage'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    buildTypes {
        debug {}
        developer {}
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        test.resources.srcDirs += 'src/test/resources'
    }

}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    exclude { "com/coinbase/v1/localServerFiles/**" }
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar
    archives javadocJar
}

install {
    repositories.mavenInstaller {
        pom.project {
            name packageName
            description packageDescription
            url 'https://github.com/coinbase/coinbase-java.git'
            inceptionYear '2015'

            packaging 'aar'
            groupId 'com.coinbase'
            artifactId packageName
            version packageVersion

            licenses {
                license {
                    name 'MIT'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                connection 'https://github.com/coinbase/coinbase-java.git'
                url 'https://github.com/coinbase/coinbase-java'

            }
            developers {
                developer {
                    name 'Coinbase'
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintray {
    if (project.hasProperty('bintrayUser')) {
        user = project.property('bintrayUser')
    } else {
        user = ""
    }
    if (project.hasProperty('bintrayKey')) {
        key = project.property('bintrayKey')
    } else {
        key = ""
    }

    configurations = ['archives']
    publish = true
    pkg {
        repo = 'maven'
        name = packageName
        userOrg = 'coinbase'
        desc = packageDescription
        licenses = ['MIT']
        vcsUrl = 'https://github.com/coinbase/coinbase-java.git'
        version {
            name = packageVersion
            desc = 'Coinbase Android SDK'
            released = new Date()
            vcsTag = packageVersion
        }
    }
}

task checkstyle(type: Checkstyle) {
    description 'Check code standard'
    group 'verification'

    configFile file("${project.rootDir}/coinbase-java/tools/rules-checkstyle.xml")

    source fileTree("${project.rootDir}/coinbase-java/src/main/java")
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
    showViolations true

    reports {
        xml.enabled = true
        html.enabled = true
        html.setDestination(new File("$project.buildDir/reports/checkstyle/checkstyle.html"))
    }
}

task pmd(type: Pmd) {
    description 'Check code quality with pmd'
    group 'verification'

    ruleSetFiles = files("${project.rootDir}/coinbase-java/tools/rules-pmd.xml")

    source fileTree("${project.rootDir}/coinbase-java/src/main/java")
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        xml.setDestination(new File("$project.buildDir/reports/pmd/pmd.xml"))
        html.setDestination(new File("$project.buildDir/reports/pmd/pmd.html"))
    }
}

task codeQualityCheck {
    description 'Check code quality with all available tools'
    group 'verification'

    dependsOn 'pmd'
    dependsOn 'lint'
    dependsOn 'checkstyle'
}


dependencies {
    api projectDependencies.gson
    api okHttpDependencies.okHttpLogin
    api projectDependencies.rxJava2

    implementation retrofitDependencies.retrofit
    implementation retrofitDependencies.rxJavaAdapter
    implementation retrofitDependencies.gsonConverter

    implementation projectDependencies.commonsIo
    implementation projectDependencies.apacheCommons
    implementation androidDependencies.supportAnnotations

    testImplementation testDependencies.mockwebserver
    testImplementation testDependencies.robolectric
    testImplementation testDependencies.junit
    testImplementation testDependencies.assertjCore
    testImplementation testDependencies.mockitoCore
}
